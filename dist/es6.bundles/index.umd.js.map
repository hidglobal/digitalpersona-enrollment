{"version":3,"file":"index.umd.js","sources":["../es6/enrollmentContext.js","../es6/private/enroller.js","../es6/tokens/cards/enroll.js","../es6/tokens/face/enroll.js","../es6/tokens/fingerprints/enroll.js","../es6/tokens/otp/actions.js","../es6/tokens/otp/enroll.js","../es6/tokens/password/actions.js","../es6/tokens/password/enroll.js","../es6/tokens/pin/enroll.js","../es6/tokens/questions/enroll.js","../es6/tokens/u2f/enroll.js"],"sourcesContent":["import { User } from '@digitalpersona/core';\r\n/**\r\n * Enrollment context.\r\n * @remarks\r\n * Pass the context object into token enrollment APIs. The single context may be shared.\r\n */\r\nexport class EnrollmentContext {\r\n    constructor(\r\n    /** DigitalPersona Enrollment web service client */\r\n    enrollService, \r\n    /** A JSON Web Token or a username of a user whose credentials are to be enrolled.\r\n     * @remarks\r\n     * Only DigitalPersona users (formerly \"Altus User\") can be enrolled without authentication,\r\n     * i.e. using only a user name. Other users must be authenticated, i.e. have a JSON Web Token.\r\n     */\r\n    user, \r\n    /** An optional JSON Web Token of a security officer performing an attended enrollment.\r\n     * If not provided, the API should try to use a user's own token instead for a self-enrollment.\r\n     * In this case the user must be allowed to do self-enrollment.\r\n     */\r\n    securityOfficer) {\r\n        this.enrollService = enrollService;\r\n        this.user = user;\r\n        this.securityOfficer = securityOfficer;\r\n        if (!this.enrollService)\r\n            throw new Error(\"enrollService\");\r\n        if (!this.user)\r\n            throw new Error(\"user\");\r\n        if (!this.securityOfficer && !(this.user instanceof User))\r\n            this.securityOfficer = this.user;\r\n    }\r\n    /**\r\n     * Check is the user has an authentication token, or just a user name.\r\n     * @returns `true` if user identity represented by an authenticatication token, `false` otherwise.\r\n     */\r\n    isAuthenticated() {\r\n        return !(this.user instanceof User);\r\n    }\r\n    /**\r\n     * Returns user identity in a form of authentication token.\r\n     * @remarks\r\n     * The user must be authenticated.\r\n     */\r\n    getJWT() {\r\n        return (this.user instanceof User) ? \"\" : this.user;\r\n    }\r\n    /**\r\n     * Returns user identity in a form of a username.\r\n     * @remarks\r\n     * The user may be authenticated or not. If authenticated, the username will be produced from\r\n     * the authentication token claims.\r\n     */\r\n    getUser() {\r\n        return (this.user instanceof User) ? this.user : User.fromJWT(this.user);\r\n    }\r\n}\r\n//# sourceMappingURL=enrollmentContext.js.map","import { User, Ticket } from '@digitalpersona/core';\r\n/** @internal */\r\nexport class Enroller {\r\n    constructor(context) {\r\n        this.context = context;\r\n        if (!this.context)\r\n            throw new Error(\"context\");\r\n    }\r\n    _canEnroll(credId) {\r\n        return this.context.enrollService.IsEnrollmentAllowed(new Ticket(this.context.securityOfficer || \"\"), this.context.getUser(), credId);\r\n    }\r\n    _enroll(credential) {\r\n        if (this.context.user instanceof User) {\r\n            return this.context.enrollService.EnrollAltusUserCredentials(new Ticket(this.context.securityOfficer || \"\"), this.context.user, credential);\r\n        }\r\n        else {\r\n            return this.context.enrollService.EnrollUserCredentials(new Ticket(this.context.securityOfficer || \"\"), new Ticket(this.context.user), credential);\r\n        }\r\n    }\r\n    _unenroll(credential) {\r\n        if (this.context.user instanceof User) {\r\n            return this.context.enrollService.DeleteAltusUserCredentials(new Ticket(this.context.securityOfficer || \"\"), this.context.user, credential);\r\n        }\r\n        else {\r\n            return this.context.enrollService.DeleteUserCredentials(new Ticket(this.context.securityOfficer || \"\"), new Ticket(this.context.user), credential);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=enroller.js.map","import { Credential, Utf8 } from '@digitalpersona/core';\r\nimport { Enroller } from '../../private';\r\n/**\r\n * Smartcard enrollment API.\r\n */\r\nexport class SmartCardEnroll extends Enroller {\r\n    /** Constructs a new smartcard enrollment API object.\r\n     * @param context - an {@link EnrollmentContext|enrollment context}.\r\n     */\r\n    constructor(context) {\r\n        super(context);\r\n    }\r\n    /** Reads a list of enrolled cards.\r\n     * @returns a promise to return a list of user's enrolled cards.\r\n     */\r\n    getEnrolledCards() {\r\n        return this.context.enrollService\r\n            .GetEnrollmentData(this.context.getUser(), Credential.SmartCard)\r\n            .then(data => JSON.parse(Utf8.fromBase64Url(data)));\r\n    }\r\n    /** Reads a card enrollment availability.\r\n     * @returns a fulfilled promise when a card can be enrolled, a rejected promise otherwise.\r\n     */\r\n    canEnroll() {\r\n        return super._canEnroll(Credential.SmartCard);\r\n    }\r\n    /** Enrolls a card.\r\n     * @param cardData - a card enrollment data obtained using {@link CardsReader.getCardEnrollData}.\r\n     * @returns a promise to perform the enrollment or reject in case of an error.\r\n     */\r\n    enroll(cardData) {\r\n        return super._enroll(new Credential(Credential.SmartCard, cardData));\r\n    }\r\n    /**\r\n     * Deletes a specific smart card enrollment defined by its pubilc key hash.\r\n     * @param keyHash - a key hash of the card. If not provided, all smartcard enrollments will be deleted.\r\n     * @returns a promise to delete the enrollment or reject in case of an error.\r\n     */\r\n    unenroll(keyHash) {\r\n        return super._unenroll(new Credential(Credential.SmartCard, keyHash));\r\n    }\r\n}\r\n/**\r\n * Contactless card enrollment API.\r\n */\r\nexport class ContactlessCardEnroll extends Enroller {\r\n    /** Constructs a new contactless card enrollment API object.\r\n     * @param context - an {@link EnrollmentContext|enrollment context}.\r\n     */\r\n    constructor(context) {\r\n        super(context);\r\n    }\r\n    /** Reads a card enrollment availability.\r\n     * @returns a fulfilled promise when a card can be enrolled, a rejected promise otherwise.\r\n     */\r\n    canEnroll() {\r\n        return super._canEnroll(Credential.ContactlessCard);\r\n    }\r\n    /** Enrolls a card.\r\n     * @param cardData - a card enrollment data obtained using {@link CardsReader.getCardEnrollData}.\r\n     * @returns a promise to perform the enrollment or reject in case of an error.\r\n     */\r\n    enroll(cardData) {\r\n        return super._enroll(new Credential(Credential.ContactlessCard, cardData));\r\n    }\r\n    /** Deletes the card enrollment.\r\n     * @returns a promise to delete the enrollment or reject in case of an error.\r\n     */\r\n    unenroll() {\r\n        return super._unenroll(new Credential(Credential.ContactlessCard));\r\n    }\r\n}\r\n/**\r\n * Proximity card enrollment API.\r\n */\r\nexport class ProximityCardEnroll extends Enroller {\r\n    /** Constructs a new proximity card enrollment API object.\r\n     * @param context - an {@link EnrollmentContext|enrollment context}.\r\n     */\r\n    constructor(context) {\r\n        super(context);\r\n    }\r\n    /** Reads a card enrollment availability.\r\n     * @returns a fulfilled promise when a card can be enrolled, a rejected promise otherwise.\r\n     */\r\n    canEnroll() {\r\n        return super._canEnroll(Credential.ProximityCard);\r\n    }\r\n    /** Enrolls a card.\r\n     * @param cardData - a card enrollment data obtained using {@link CardsReader.getCardEnrollData}.\r\n     * @returns a promise to perform the enrollment or reject in case of an error.\r\n     */\r\n    enroll(cardData) {\r\n        return super._enroll(new Credential(Credential.ProximityCard, cardData));\r\n    }\r\n    /** Deletes the card enrollment.\r\n     * @returns a promise to delete the enrollment or reject in case of an error.\r\n     */\r\n    unenroll() {\r\n        return super._unenroll(new Credential(Credential.ProximityCard));\r\n    }\r\n}\r\n//# sourceMappingURL=enroll.js.map","import { Credential } from '@digitalpersona/core';\r\nimport { Enroller } from '../../private';\r\n/**\r\n * Face enrollment API.\r\n */\r\nexport class FaceEnroll extends Enroller {\r\n    /** Constructs a new face enrollment API object.\r\n     * @param context - an {@link EnrollmentContext|enrollment context}.\r\n     */\r\n    constructor(context) {\r\n        super(context);\r\n    }\r\n    /** Reads a face enrollment availability.\r\n     * @returns a fulfilled promise when a face can be enrolled, a rejected promise otherwise.\r\n     */\r\n    canEnroll() {\r\n        return super._canEnroll(Credential.Face);\r\n    }\r\n    /** Enrolls a face.\r\n     * @param samples - a collection of face images.\r\n     * @returns a promise to perform the enrollment or reject in case of an error.\r\n     */\r\n    enroll(samples) {\r\n        return super._enroll(new Credential(Credential.Face, samples));\r\n    }\r\n    /** Deletes the face enrollment.\r\n     * @returns a promise to delete the enrollment or reject in case of an error.\r\n     */\r\n    unenroll() {\r\n        return super._unenroll(new Credential(Credential.Face));\r\n    }\r\n}\r\n//# sourceMappingURL=enroll.js.map","import { Credential, Utf8, Finger } from '@digitalpersona/core';\r\nimport { Enroller } from '../../private';\r\n/**\r\n * Fingerprint enrollment API.\r\n */\r\nexport class FingerprintsEnroll extends Enroller {\r\n    /** Constructs a new fingerprint enrollment API object.\r\n     * @param context - an {@link EnrollmentContext|enrollment context}.\r\n     */\r\n    constructor(context) {\r\n        super(context);\r\n    }\r\n    /** Reads a fingerprint enrollment status.\r\n     * @returns a promise to return fingerprint enrollment data. The data is a collection of enrolled fingers.\r\n     */\r\n    getEnrolledFingers() {\r\n        return this.context.enrollService\r\n            .GetEnrollmentData(this.context.getUser(), Credential.Fingerprints)\r\n            .then(data => JSON.parse(Utf8.fromBase64Url(data))\r\n            .map(item => Finger.fromJson(item)));\r\n    }\r\n    /** Reads a fingerprint enrollment availability.\r\n     * @returns a fulfilled promise when fingerprints can be enrolled, a rejected promise otherwise.\r\n     */\r\n    canEnroll() {\r\n        return super._canEnroll(Credential.Fingerprints);\r\n    }\r\n    /** Enrolls a fingerprint.\r\n     * @param position - a position of a finger to enroll\r\n     * @param samples - a collection of fingerprint scans.\r\n     * @returns a promise to perform the enrollment or reject in case of an error.\r\n     */\r\n    enroll(position, samples) {\r\n        const data = {\r\n            position: (position instanceof Finger) ? position.position : position,\r\n            samples,\r\n        };\r\n        return super._enroll(new Credential(Credential.Fingerprints, data));\r\n    }\r\n    /** Deletes the fingerprint enrollment.\r\n     * @param position - a position(s) of a finger(s) to delete.\r\n     *                   If not defined, all enrolled fingerprintss will be deleted.\r\n     * @returns a promise to delete the enrollment or reject in case of an error.\r\n     */\r\n    unenroll(position) {\r\n        const data = typeof (position) === \"number\" ? [{ position }] :\r\n            (position instanceof Finger) ? [position] :\r\n                (position instanceof Array) ? position.map(p => (p instanceof Finger) ? p.position : p)\r\n                    : null;\r\n        return super._unenroll(new Credential(Credential.Fingerprints, data));\r\n    }\r\n}\r\n//# sourceMappingURL=enroll.js.map","/** @internal */\r\nexport var CustomAction;\r\n(function (CustomAction) {\r\n    CustomAction[CustomAction[\"SendEmailVerificationRequest\"] = 16] = \"SendEmailVerificationRequest\";\r\n    CustomAction[CustomAction[\"SendSMSRequest\"] = 513] = \"SendSMSRequest\";\r\n    CustomAction[CustomAction[\"SendEmailRequest\"] = 514] = \"SendEmailRequest\";\r\n    CustomAction[CustomAction[\"UnlockActiveIdHardwareToken\"] = 515] = \"UnlockActiveIdHardwareToken\";\r\n})(CustomAction || (CustomAction = {}));\r\n//# sourceMappingURL=actions.js.map","import { User, Credential, JWT, Url, Base32, Ticket, Base64Url } from \"@digitalpersona/core\";\r\nimport { Enroller } from \"../../private\";\r\nimport { CustomAction } from \"./actions\";\r\n/**\r\n * One-time password enrollment API.\r\n */\r\nexport class TimeOtpEnroll extends Enroller {\r\n    /** Constructs a new One-Time Password enrollment API object.\r\n     * @param context - an {@link EnrollmentContext|enrollment context}.\r\n     */\r\n    constructor(context) {\r\n        super(context);\r\n    }\r\n    /**\r\n     * Converts a secret key to a Key URI, which will be encode as a QR Code image to scan.\r\n     * @param key - a secret key to convert to a Key URI string.\r\n     * @returns - a promise to return a Key URI string\r\n     * @remarks\r\n     * For Push Notifications fo AD users, make sure the user's token has an `ad_guid` claim.\r\n     * You may need to use `ClaimsService.GetClaims()` method to append this claim to an existing token.\r\n     */\r\n    createKeyUri(key) {\r\n        const type = \"totp\";\r\n        const jwt = this.context.getJWT();\r\n        const claims = JWT.claims(jwt);\r\n        if (!claims)\r\n            return Promise.reject(new Error('NoClaims'));\r\n        const issuer = claims.dom || claims.iss; // will be used as a prefix of a label\r\n        if (!issuer)\r\n            return Promise.reject(new Error('NoIssuer'));\r\n        const uid = claims.uid || claims[\"ad_guid\"]; // required for Push OTP. Also needs TenantID.\r\n        const username = this.context.getUser().name;\r\n        const secret = Base32.fromBytes(key);\r\n        return this.context.enrollService\r\n            .GetEnrollmentData(User.Anonymous(), Credential.OneTimePassword)\r\n            .then(data => {\r\n            const otpData = JSON.parse(data);\r\n            if (!otpData)\r\n                return Promise.reject(new Error(\"NoEnrollmentData\"));\r\n            const pushSupported = uid && otpData.pn_tenant_id;\r\n            const uri = new Url(`otpauth://${type}`, `${issuer}:${username}`, {\r\n                secret,\r\n                issuer,\r\n                apikey: otpData.pn_api_key,\r\n                tenantid: pushSupported ? otpData.pn_tenant_id : undefined,\r\n                useruuid: pushSupported ? uid : undefined,\r\n            });\r\n            return uri.href;\r\n        });\r\n    }\r\n    /**\r\n     * Sends an verification code using SMS to the user's device.\r\n     * @param key - a secret key to \"seed\" an OTP generator and start generating verification codes.\r\n     * @param phoneNumber - a phone number to send a current verification code to.\r\n     */\r\n    sendVerificationCode(key, phoneNumber) {\r\n        return this.context.enrollService\r\n            .CustomAction(Ticket.None(), this.context.getUser(), new Credential(Credential.OneTimePassword, {\r\n            key: Base64Url.fromBytes(key),\r\n            phoneNumber,\r\n        }), CustomAction.SendSMSRequest)\r\n            .then();\r\n    }\r\n    /**\r\n     * Enrolls One-Time Password using a software TOTP (e.g. DigitalPersona app, Google Authenticator etc.)\r\n     * @param code - a verification code entered by a user.\r\n     * @param key - a secret key used to \"seed\" an OTP generator.\r\n     * @param phoneNumber - a phone number the verification code was sent to\r\n     * @returns a promise to perform the enrollment or reject in case of an error.\r\n     */\r\n    enrollSoftwareOtp(code, key, phoneNumber) {\r\n        return super._enroll(new Credential(Credential.OneTimePassword, {\r\n            otp: code,\r\n            key: Base64Url.fromBytes(key),\r\n            phoneNumber,\r\n        }));\r\n    }\r\n    /**\r\n     * Enrolls a hardware TOTP token.\r\n     * @param code - a verification code entered by a user.\r\n     * @param serialNumber - a serial number of the TOTP token.\r\n     * @param counter - an optional counter displayed on some token models.\r\n     * @param timer - an optional timer displayed on some token models\r\n     * @returns a promise to perform the enrollment or reject in case of an error.\r\n     */\r\n    enrollHardwareOtp(code, serialNumber, counter, timer) {\r\n        return super._enroll(new Credential(Credential.OneTimePassword, {\r\n            otp: code,\r\n            serialNumber,\r\n            counter,\r\n            timer,\r\n        }));\r\n    }\r\n    /** Deletes the OTP enrollment.\r\n     * @returns a promise to delete the enrollment or reject in case of an error.\r\n     */\r\n    unenroll() {\r\n        return super._unenroll(new Credential(Credential.OneTimePassword));\r\n    }\r\n}\r\n//# sourceMappingURL=enroll.js.map","/** @internal */\r\nexport var CustomAction;\r\n(function (CustomAction) {\r\n    CustomAction[CustomAction[\"PasswordRandomization\"] = 4] = \"PasswordRandomization\";\r\n    CustomAction[CustomAction[\"PasswordReset\"] = 13] = \"PasswordReset\";\r\n})(CustomAction || (CustomAction = {}));\r\n//# sourceMappingURL=actions.js.map","import { Credential, Ticket } from '@digitalpersona/core';\r\nimport { CustomAction } from './actions';\r\nimport { Enroller } from '../../private';\r\n/**\r\n * Password enrollment API.\r\n * @remarks\r\n * As a primary credential, user's password cannot be unenroled, it can only be changed, reset or randomized.\r\n */\r\nexport class PasswordEnroll extends Enroller {\r\n    /** Constructs a new password enrollment API object.\r\n     * @param context - an {@link EnrollmentContext|enrollment context}.\r\n     */\r\n    constructor(context) {\r\n        super(context);\r\n    }\r\n    /** Reads a password change availability.\r\n     * @returns a fulfilled promise when a password can be changed, a rejected promise otherwise.\r\n     */\r\n    canEnroll() {\r\n        return super._canEnroll(Credential.Password);\r\n    }\r\n    /**\r\n     * Changes a password.\r\n     * @param newPassword - a new password.\r\n     * @param oldPassword - a password to replace. Must match the existing password.\r\n     * @returns a promise to perform the password change or reject in case of an error.\r\n     */\r\n    enroll(newPassword, oldPassword) {\r\n        return super._enroll(new Credential(Credential.Password, { oldPassword, newPassword }));\r\n    }\r\n    /**\r\n     * Resets a password.\r\n     * @param newPassword - a new password which will replace any existing password.\r\n     * @returns a promise to perform the password reset or reject in case of an error.\r\n     * @remarks\r\n     * DigitalPersona AD Server supports password randomization only for ActiveDirectory users.\r\n     * DigitalPersona LDS Server supports password randomization only for DigitalPersona users (formerly \"Altus Users\").\r\n     */\r\n    reset(newPassword) {\r\n        return super._enroll(new Credential(Credential.Password, newPassword));\r\n    }\r\n    /**\r\n     * Creates a new strong password with good complexity properties.\r\n     * @returns a promise to return a randomized password.\r\n     * @remarks\r\n     * DigitalPersona AD Server supports password randomization only for ActiveDirectory users.\r\n     * DigitalPersona LDS Server supports password randomization only for DigitalPersona users (formerly \"Altus Users\").\r\n     */\r\n    randomize() {\r\n        return this.context.enrollService.CustomAction(new Ticket(this.context.securityOfficer || \"\"), this.context.getUser(), new Credential(Credential.Password), CustomAction.PasswordRandomization);\r\n    }\r\n}\r\n//# sourceMappingURL=enroll.js.map","import { Credential } from '@digitalpersona/core';\r\nimport { Enroller } from '../../private';\r\n/**\r\n * Personal Identification Number (PIN) enrollment API.\r\n */\r\nexport class PinEnroll extends Enroller {\r\n    /** Constructs a new PIN enrollment API object.\r\n     * @param context - an {@link EnrollmentContext|enrollment context}.\r\n     */\r\n    constructor(context) {\r\n        super(context);\r\n    }\r\n    /** Reads a PIN enrollment availability.\r\n     * @returns a fulfilled promise when a PIN can be enrolled, a rejected promise otherwise.\r\n     */\r\n    canEnroll() {\r\n        return super._canEnroll(Credential.PIN);\r\n    }\r\n    /** Enrolls a PIN.\r\n     * @param pin - a Personal Identification Number (PIN).\r\n     * @returns a promise to perform the enrollment or reject in case of an error.\r\n     */\r\n    enroll(pin) {\r\n        return super._enroll(new Credential(Credential.PIN, pin));\r\n    }\r\n    /** Deletes the PIN enrollment.\r\n     * @returns a promise to delete the enrollment or reject in case of an error.\r\n     */\r\n    unenroll() {\r\n        return super._unenroll(new Credential(Credential.PIN));\r\n    }\r\n}\r\n//# sourceMappingURL=enroll.js.map","import { Credential, Question, Utf8 } from '@digitalpersona/core';\r\nimport { Enroller } from '../../private';\r\n/**\r\n * Security Questions enrollment API.\r\n */\r\nexport class SecurityQuestionsEnroll extends Enroller {\r\n    /** Constructs a new Security Questions enrollment API object.\r\n     * @param context - an {@link EnrollmentContext|enrollment context}.\r\n     */\r\n    constructor(context) {\r\n        super(context);\r\n    }\r\n    /**\r\n     * Reads enrolled Security Questions.\r\n     * @returns a promise to return a collection of enrolled Security Questions.\r\n     */\r\n    getEnrolledQuestions() {\r\n        return this.context.enrollService\r\n            .GetEnrollmentData(this.context.getUser(), Credential.SecurityQuestions)\r\n            .then(data => JSON.parse(Utf8.fromBase64Url(data))\r\n            .map(item => Question.fromJson(item)));\r\n    }\r\n    /** Reads a Security Questions enrollment availability.\r\n     * @returns a fulfilled promise when Security Questions can be enrolled, a rejected promise otherwise.\r\n     */\r\n    canEnroll() {\r\n        return super._canEnroll(Credential.SecurityQuestions);\r\n    }\r\n    /**\r\n     * Enrolls Security Questions.\r\n     * @param questionsWithAnswers - a colelction of user's answers to Security Questions.\r\n     * @returns a promise to perform the enrollment or reject in case of an error.\r\n     */\r\n    enroll(questionsWithAnswers) {\r\n        const equal = (a, b) => a.question.number === b.question.number;\r\n        const unique = (val, idx, arr) => arr.findIndex(qa => equal(qa, val)) === idx;\r\n        const data = questionsWithAnswers\r\n            .filter(qa => qa.question.number === qa.answer.number)\r\n            .filter(unique)\r\n            .sort((a, b) => b.question.number - a.question.number); // server requires reverse order\r\n        return super._enroll(new Credential(Credential.SecurityQuestions, data));\r\n    }\r\n    /** Deletes the Security Question enrollment.\r\n     * @returns a promise to delete the enrollment or reject in case of an error.\r\n     */\r\n    unenroll() {\r\n        return super._unenroll(new Credential(Credential.SecurityQuestions));\r\n    }\r\n}\r\n//# sourceMappingURL=enroll.js.map","import * as u2fApi from 'u2f-api';\r\nimport { Credential, Base64Url } from '@digitalpersona/core';\r\nimport { Enroller } from '../../private';\r\n/**\r\n * Universal Second Factor (U2F) enrollment API.\r\n */\r\nexport class U2FEnroll extends Enroller {\r\n    /** Constructs a new U2F enrollment API object.\r\n     * @param context - an {@link EnrollmentContext|enrollment context}.\r\n     * @param appId - an AppID of the service.\r\n     */\r\n    constructor(context, appId) {\r\n        super(context);\r\n        if (!appId)\r\n            throw new Error(\"appId\");\r\n        this.appId = appId;\r\n    }\r\n    /** Reads a U2F enrollment availability.\r\n     * @returns a fulfilled promise when a U2F can be enrolled, a rejected promise otherwise.\r\n     */\r\n    canEnroll() {\r\n        return super._canEnroll(Credential.U2F);\r\n    }\r\n    /**\r\n     * Enrolls a U2F token.\r\n     * @returns a promise to perform the enrollment or reject in case of an error.\r\n     */\r\n    enroll() {\r\n        const version = \"U2F_V2\";\r\n        const appId = this.appId;\r\n        const timestamp = Math.round(new Date().getTime() / (U2FEnroll.TIME_WINDOW * 1000));\r\n        const challenge = Base64Url.fromUtf16(timestamp.toString());\r\n        const registerRequests = [{ version, appId, challenge }];\r\n        return u2fApi\r\n            .register(registerRequests, [], U2FEnroll.TIMEOUT)\r\n            .then((response) => super._enroll(new Credential(Credential.U2F, Object.assign({ version, appId }, response))));\r\n    }\r\n    /** Deletes the U2F enrollment.\r\n     * @returns a promise to delete the enrollment or reject in case of an error.\r\n     */\r\n    unenroll() {\r\n        return super._unenroll(new Credential(Credential.U2F));\r\n    }\r\n}\r\nU2FEnroll.TIMEOUT = 20;\r\nU2FEnroll.TIME_WINDOW = 30;\r\n//# sourceMappingURL=enroll.js.map"],"names":["User","Ticket","Credential","Utf8","Finger","JWT","Base32","Url","Base64Url","CustomAction","Question","u2fApi\r\n            .register"],"mappings":"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"}